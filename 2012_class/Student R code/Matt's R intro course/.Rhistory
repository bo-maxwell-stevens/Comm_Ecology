se.exp
ci.exp
rseq<-seq(0.01,0.3, length=100)
low <-dnorm(rseq,ci.exp[1],se.exp)#
high<-dnorm(rseq,ci.exp[2],se.exp)#
plot(rseq,low,type='l')#
lines(rseq,high)#
abline(v=ci.exp, lty=3)
rseq<-seq(0.03,0.2, length=100)
#
low <-dnorm(rseq,ci.exp[1],se.exp)#
high<-dnorm(rseq,ci.exp[2],se.exp)#
plot(rseq,low,type='l')#
lines(rseq,high)#
abline(v=ci.exp, lty=3)
rseq<-seq(0.03,0.15, length=100)
#
low <-dnorm(rseq,ci.exp[1],se.exp)#
high<-dnorm(rseq,ci.exp[2],se.exp)#
plot(rseq,low,type='l')#
lines(rseq,high)#
abline(v=ci.exp, lty=3)
data
-n*log(rhomle)+ rhomle*sum(diam)
	-n*log(rho)+rho*sum(diam)
lkexp <-function(rhomle){#
	-n*log(rhomle)+rho*sum(diam)#
	}
plot(rseq,lkexp(rseq), type='l')
lkexp <-function(rhomle){#
	-n*log(rhomle)+rho*sum(diam)#
	}
plot(rseq,lkexp(rseq), type='l')
lkexp <-function(rhomle){#
	-n*log(rhomle)+rhomle*sum(diam)#
	}#
plot(rseq,lkexp(rseq), type='l')
abline(v=rhomle,lty=2)
abline(h=lkexp(rhomle), lty=2)
lkexp(rhomle)
hist(rhomle, nclass=20, probability=T)
hist(rseq, nclass=20, probability=T)
low <-dnorm(rseq,ci.exp[1],se.exp)#
high<-dnorm(rseq,ci.exp[2],se.exp)#
plot(rseq,low,type='l')#
lines(rseq,high)#
abline(v=ci.exp, lty=3)
P_star <- function( x )#
{#
    y <- exp(0.4*(x - 0.4)^2 - 0.08*x^4)#
}
lo <- -4#
hi <-  4
Zval = integrate(P_star, lower = lo, upper = hi, subdivisions=1000,#
          stop.on.error = TRUE, keep.xy = FALSE, aux = NULL)#
Z <- Zval$value
norm_P_star <- function(x, Z)#
{#
	y <- P_star(x)/Z#
}
abscissa = seq(from = lo, to = hi, by = 0.01)#
plot(abscissa, P_star(abscissa), type="l")
P_star_max <- optimize(P_star, c(lo, hi), tol = 0.001, maximum=T)
c_times_Q_star <- P_star_max$objective + 0.01#
#
n <- 500 # number of draws
P_star_max
results <- rep(0,n)#
num_accepted <- 0
for (i in 1:n)#
{#
    # steps for rejection sampling#
    # 1. draw variate x according to Q(x); here Q(x) ~ U[-4, 4]#
    x_0 <- runif(1, min = lo, max = hi)
if (u < P_star(x_0))#
	{
		num_accepted <- num_accepted + 1 #
		results[num_accepted] <- x_0#
	}#
}
for (i in 1:n)#
{#
    # steps for rejection sampling#
    # 1. draw variate x according to Q(x); here Q(x) ~ U[-4, 4]#
    x_0 <- runif(1, min = lo, max = hi)#
#
	# 2. generate a uniform variate u on [0, cQ*]#
    u <- runif(1,min = 0,max = 1) * c_times_Q_star#
#
	# 3. if u < P*(x_0) then accept; otherwise reject#
	# first update count of acceptances#
	if (u < P_star(x_0))#
	{#
		num_accepted <- num_accepted + 1 #
		results[num_accepted] <- x_0#
	}#
}
plot(abscissa, norm_P_star(abscissa, Z), type = "l", col = 1,#
	xlab = "x", ylab = "norm_P_star(x) and histogram",#
	main = "Rejection Sampling")#
hist(results[1:num_accepted], breaks = 40,#
	probability= T, xlim = c(lo, hi), add=TRUE)#
#
acceptance_rate <- num_accepted / n
# Rejection sampling example#
##
# - this is a simple demonstration#
##
# - here, normalization to proper density is#
#   done by numerical integration to show#
#   agreement with simulated results#
# NAU BIO 680#
# P. Flikkema#
#
# create function for target (scaled) density P_star#
# exp(0.4(x - 0.4)^2 - 0.08x^4) on [-4,4]#
P_star <- function( x )#
{#
    y <- exp(0.4*(x - 0.4)^2 - 0.08*x^4)#
}#
#
# assume continuous support on [-lo, hi]#
lo <- -4#
hi <-  4#
#
# compute normalization constant#
Zval = integrate(P_star, lower = lo, upper = hi, subdivisions=1000,#
          stop.on.error = TRUE, keep.xy = FALSE, aux = NULL)#
Z <- Zval$value#
# determine normalized function for#
# plotting with histogram#
norm_P_star <- function(x, Z)#
{#
	y <- P_star(x)/Z#
}#
#
# plot it (first of two plots)#
abscissa = seq(from = lo, to = hi, by = 0.01)#
plot(abscissa, P_star(abscissa), type="l")#
#
# find maximum#
P_star_max <- optimize(P_star, c(lo, hi), tol = 0.001, maximum=T)#
#
# choose uniform (scaled) proposal density cQ*#
c_times_Q_star <- P_star_max$objective + 0.01#
#
n <- 5000 # number of draws#
#
# must count and record accepted samples#
results <- rep(0,n)#
num_accepted <- 0#
# iterate: n draws#
for (i in 1:n)#
{#
    # steps for rejection sampling#
    # 1. draw variate x according to Q(x); here Q(x) ~ U[-4, 4]#
    x_0 <- runif(1, min = lo, max = hi)#
#
	# 2. generate a uniform variate u on [0, cQ*]#
    u <- runif(1,min = 0,max = 1) * c_times_Q_star#
#
	# 3. if u < P*(x_0) then accept; otherwise reject#
	# first update count of acceptances#
	if (u < P_star(x_0))#
	{#
		num_accepted <- num_accepted + 1 #
		results[num_accepted] <- x_0#
	}#
}#
#
# plot the histogram#
plot(abscissa, norm_P_star(abscissa, Z), type = "l", col = 1,#
	xlab = "x", ylab = "norm_P_star(x) and histogram",#
	main = "Rejection Sampling")#
hist(results[1:num_accepted], breaks = 40,#
	probability= T, xlim = c(lo, hi), add=TRUE)#
#
acceptance_rate <- num_accepted / n
# Rejection sampling example#
##
# - this is a simple demonstration#
##
# - here, normalization to proper density is#
#   done by numerical integration to show#
#   agreement with simulated results#
# NAU BIO 680#
# P. Flikkema#
#
# create function for target (scaled) density P_star#
# exp(0.4(x - 0.4)^2 - 0.08x^4) on [-4,4]#
P_star <- function( x )#
{#
    y <- exp(0.4*(x - 0.4)^2 - 0.08*x^4)#
}#
#
# assume continuous support on [-lo, hi]#
lo <- -4#
hi <-  4#
#
# compute normalization constant#
Zval = integrate(P_star, lower = lo, upper = hi, subdivisions=1000,#
          stop.on.error = TRUE, keep.xy = FALSE, aux = NULL)#
Z <- Zval$value#
# determine normalized function for#
# plotting with histogram#
norm_P_star <- function(x, Z)#
{#
	y <- P_star(x)/Z#
}#
#
# plot it (first of two plots)#
abscissa = seq(from = lo, to = hi, by = 0.01)#
plot(abscissa, P_star(abscissa), type="l")#
#
# find maximum#
P_star_max <- optimize(P_star, c(lo, hi), tol = 0.001, maximum=T)#
#
# choose uniform (scaled) proposal density cQ*#
c_times_Q_star <- P_star_max$objective + 0.01#
#
n <- 50000 # number of draws#
#
# must count and record accepted samples#
results <- rep(0,n)#
num_accepted <- 0#
# iterate: n draws#
for (i in 1:n)#
{#
    # steps for rejection sampling#
    # 1. draw variate x according to Q(x); here Q(x) ~ U[-4, 4]#
    x_0 <- runif(1, min = lo, max = hi)#
#
	# 2. generate a uniform variate u on [0, cQ*]#
    u <- runif(1,min = 0,max = 1) * c_times_Q_star#
#
	# 3. if u < P*(x_0) then accept; otherwise reject#
	# first update count of acceptances#
	if (u < P_star(x_0))#
	{#
		num_accepted <- num_accepted + 1 #
		results[num_accepted] <- x_0#
	}#
}#
#
# plot the histogram#
plot(abscissa, norm_P_star(abscissa, Z), type = "l", col = 1,#
	xlab = "x", ylab = "norm_P_star(x) and histogram",#
	main = "Rejection Sampling")#
hist(results[1:num_accepted], breaks = 40,#
	probability= T, xlim = c(lo, hi), add=TRUE)#
#
acceptance_rate <- num_accepted / n
acceptance_rate
yags.make.libu()
?library path
?_library path
?library_path
??library_path
library()
install.packages("yags")
library(yags)
library()
install.packages("yags")
n<-100
beta<-matrix(c(-1.5,.2))
beta<-matrix(c(-1.5,0.2))
beta<-matrix(c(-1.5,0.2), ncol=1)
sig<-0.02
x<-matrix(1,n,3)
y<-rnorm(n, x%*%beta, sqrt(beta))
x<-matrix(1,n,3)
y<-rnorm(n, x%*%beta, sqrt(beta))
beta<-matrix(c(-1,0.5,0.2), ncol=1)
y<-rnorm(n, x%*%beta, sqrt(beta))
x[,3]<-runif(n,-5,5)
y<-rnorm(n, x%*%beta, sqrt(beta))
par(mfcol=c(2,2))
y<-rnorm(n, x%*%beta, sqrt(beta))
y<-rnorm(n, x%*%beta, sqrt(sig))
plt(x[,2])
plot(x[,2])
priorB<-beta*0
priorIV<-solve(diag(1000,3))
priorB
priorIV
s1<1
s1<-1
s2<-1
source("/Users/Hillabeans/Desktop/Academics baby/2010 Spring/Clark workshop/5.10.10/clarkFunctions.R")
updateB<-function(){#
	V<-solve(crossprod(x)/sg + priorIV)    #sg=sigma current value#
	v<-crossprod(x,y)/sg +priorIV%*%priorB#
	mymvnorm(1,V%*%v,V)#
	}#
	#
updateS <-function(){#
	u1<-s1+n/2#
	u2<-s2+crossprod(y-x%*%bg) #bg is current value of beta#
	1/rgamma(1,u1,u2)#
	}
ng<-10000#
bgibbs<-matrix(NA, ng, 3)  #3 col, 1 for each beta#
sgibbs<-rep(NA, ng)
updateB()
sg<-1
bg<-updateB()
V
updateB<-function(){#
	V<-solve(crossprod(x)/sg + priorIV)    #sg=sigma current value#
	v<-crossprod(x,y)/sg +priorIV%*%priorB#
	mymvnorm(1,V%*%v,V)#
	}
V
#Gibbs update#
updateB<-function(){#
	V<-solve(crossprod(x)/sg + priorIV)    #sg=sigma current value#
	v<-crossprod(x,y)/sg +priorIV%*%priorB#
	t(myrmvnorm(1,t(V%*%v),V))#
	}
for(g in 1:ng) {#
sgibbs[g]<-sg#
bgibbs[g,]<-bg#
}
bg<-updateB()  #needs initial value for sg#
sg<-updateS()
for(g in 1:ng) {#
sgibbs[g]<-sg#
bgibbs[g,]<-bg#
}#
#
sg<-1
bg
sg
sg<-updateS()
sg
ng<-10000#
bgibbs<-matrix(NA, ng, 3)  #3 col, 1 for each beta#
sgibbs<-rep(NA, ng)	#
#
#Gibbs loop#
bg<-updateB()  #needs initial value for sg#
sg<-updateS()#
#
for(g in 1:ng) {#
sgibbs[g]<-sg#
bgibbs[g,]<-bg#
}
head(bgibbs)
sgibbs[1:10]
#
ng<-10000#
bgibbs<-matrix(NA, ng, 3)  #3 col, 1 for each beta#
sgibbs<-rep(NA, ng)	#
#
#Gibbs loop#
bg<-updateB()  #needs initial value for sg#
sg<-updateS()#
sg<-1#
#
for(g in 1:ng) {#
sgibbs[g]<-sg#
bgibbs[g,]<-bg#
}
xmean<-apply(x,2,mean)
xmean
x[,2]<-x[,2] - xmean[2]
x[,3]<-x[,3]- xmean[3]
beta
beta<-matrix(c(-1,0.5,2), ncol=1)
n<-100#
beta<-matrix(c(-1,0.5,2), ncol=1)#
sig<-0.02#
x<-matrix(1,n,3)#
x[,2]<-runif(n,0,10)#
x[,3]<-runif(n,-5,5)#
y<-rnorm(n, x%*%beta, sqrt(sig))
priorB<-beta*0               #uninformative#
priorIV<-solve(diag(1000,3)) # variance is huge = 1000#
priorB#
priorIV
s1<-1#
s2<-1
updateB<-function(){#
	V<-solve(crossprod(x)/sg + priorIV)    #sg=sigma current value#
	v<-crossprod(x,y)/sg +priorIV%*%priorB#
	t(myrmvnorm(1,t(V%*%v),V))#
	}
updateS <-function(){#
	u1<-s1+n/2#
	u2<-s2+crossprod(y-x%*%bg) #bg is current value of beta#
	1/rgamma(1,u1,u2)#
	}
ng<-10000#
bgibbs<-matrix(NA, ng, 3)  #3 col, 1 for each beta#
sgibbs<-rep(NA, ng)	#
#
#Gibbs loop#
bg<-updateB()  #needs initial value for sg#
sg<-updateS()#
sg<-1#
#
for(g in 1:ng) {#
sgibbs[g]<-sg#
bgibbs[g,]<-bg#
}
ng<-10000#
bgibbs<-matrix(NA, ng, 3)  #3 col, 1 for each beta#
sgibbs<-rep(NA, ng)	#
#
#Gibbs loop#
#
sg<-1#
#
for(g in 1:ng) {#
bg<-updateB()  #needs initial value for sg#
sg<-updateS()#
#
sgibbs[g]<-sg#
bgibbs[g,]<-bg#
}
bg
sg
xmean<-apply(x,2,mean)
xmean
x[,2]<-x[,2] - xmean[2]#
x[,3]<-x[,3]- xmean[3]
mean(b, na.rm=T)
processPars(bgibbs, xtrue = beta,CPLOT=T)
processPars(bgibbs, xtrue = beta,DPLOT=T) #change to DPLOT for densities
processPars(cbind(bgibbs,sgibbs), xtrue = c(beta,sig), CPLOT=T)
x2<-x[,2]
x3<-x[,3]
lm(y~x2+x3)
summary(lm(y~x2+x3))
processPars(bgibbs)
apply(bgibbs,2,sd)
head(bgibbs)#
sgibbs[1:10]
l=40
m=45
h=33
aov(l,m,h)
bin=c("low", "med", "high")
bin
div=c(40,45,33)
div
data<-c(bin,div)
data
?mean
90s=c(3.123,-0.27,2.103,4.467,1.511,4.074,1.445,3.119,4.299,-3.513,-1.625)
90s <-c(3.123,-0.27,2.103,4.467,1.511,4.074,1.445,3.119,4.299,-3.513,-1.625)
90 <-c(3.123,-0.27,2.103,4.467,1.511,4.074,1.445,3.119,4.299,-3.513,-1.625)
the90 <-c(3.123,-0.27,2.103,4.467,1.511,4.074,1.445,3.119,4.299,-3.513,-1.625)
the90
mean(the90)
sd(the90)
the90s <-c(3.123,-0.27,2.103,4.467,1.511,4.074,1.445,3.119,4.299,-3.513,-1.625)#
mean(the90s)  #1.703#
sd(the90s)
the80s <-c(2.38,-2.05,0.79,4.59,0.32,3.32,-0.18,0.96,0.26,-3.3)
mean(the80s)  #1.703
sd(the80s)
the00s<-c(-2.5,0.19,-4.51,-3.7,-2.07,2.72,-3.11,-3.38,0.72,-1.88)
mean(the00s)
sd(the00s)
t.test(the80s,the00s)
librry(ecodist)
library(ecodist)
install.packages(ecodist)
library(ecodist)#
install.packages(ecodist)
library(ecodist)#
install.packages("ecodist")
data(dune)
library(vegan)
data(dune)
data
data(dune.env)
summary(dune)
summary(dune.env)
d=vegdist(dune.env)
d=vegdist(dune)
N=nmds(d, mindim=1, maxdim=6, nits=3)#
names(N)#
attach(N)#
conf
plot(N$stress)
plot(N$stress,col=as.numeric(g1(6,3)))
legend('topright',legend=1:6, fill=1:6)
N.=nmds.min(N,3)#
N.
plot(N.)
N.=nmds.min(N,3)
N.=N.[,1:2]
moist=as.numeric(dune.env$Moisture)
plot(N.,col=moist,pch=moist)
ordiellipse(N.,factor(moist))
ordispider(N.,moist)
plot(envfit(N.~moist))
plot(N.)
N.=nmds.min(N,3)
N.=nmds.min(N,3)
N.=nmds.min(N,3)
N.=N.[,1:2]
N.=N.[,1:2]#
moist=as.numeric(dune.env$Moisture)#
plot(N.,col=moist,pch=moist)#
ordiellipse(N.,factor(moist))#
ordispider(N.,moist)#
plot(envfit(N.~moist))
dune
dune.env
