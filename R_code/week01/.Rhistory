#(a) Read about the dataset trees
?trees
#(b) Use the plot() function
# i. xy pairs
plot(trees$Volume, trees$Girth)
# ii. Use the formula argument
plot(Volume ~ Girth, data=trees)
# (c) Change the labels
plot(Volume ~ Girth, data=trees, xlab="Diameter in cm", ylab="Volume in cubic feet")
# Problem 4: Adding graphical elements
# (a) Using abline()
# i. Add a line representing the mean volume
abline(h=mean(trees$Volume))
# ii. Add a line representing the mean girth
abline(v=mean(trees$Girth))
# iii. Add a line with y intercept of -36.94 and slope of 5.066
abline(-36.94, 5.066)
#(b) Add the regression line to the plot
# i. Fit the regression model
model <- lm(Volume ~ Girth, data=trees)
# ii. Add the line
abline(model)
# Problem 5: Plot an arbitrary curve
#(a) Create a grid
x <- seq(0,10, length.out=11)
#(b) Create a vector of y-values
y <- dexp(x, rate=0.7)
#(c) Plot them xy style
plot(x,y)
#(d) Connect the dots
plot(x,y, type='b')
#(e) Smooth it out
x <- seq(0,10, length.out=1001)
y <-dexp(x, rate=0.7)
plot(x,y, type='l')
# Problem 6: Add another curve to the plot
#(a) Use the lines function
y<-dexp(x, rate=0.3)
lines(x,y)
#(b Change the color)
lines(x,y, col=2)
plot(x,y, type="l")
plot(x,y, type="b")
#### Mike Lommler ####
#### STA 599 ####
#### Lab Assignment 5 ####
##########################
# Problem 1: Create a histogram of data drawn from a normal distribution
#(a) n=1000, mean=5, standard deviation =3
Z <- rnorm(1000, 5, 3)
#(b) Create histogram using hist()
hist(Z)
#(c)
# i Use 100 bins
hist(Z, breaks=100)
# ii Creating bin width of 0.1
min(Z) #found minimum value of my normal distribution
max(Z) #maximum value of normal distribution
bins <- seq(-3.5, 15.0, by=.1)
hist(Z, breaks=bins)
#(d) Change the y-axis from frequency to density
hist(Z, breaks=bins, freq=FALSE)
#(e) Re-name the x-axis, in this case "My Name Is My Name"
hist(Z, breaks=bins, freq=FALSE, xlab="My Name Is My Name")
#(f) Give it a title, "Say What Again"
hist(Z, breaks=bins, freq=FALSE, xlab="My Name Is My Name", main="Say What Again")
# Problem 2: Create boxplots for iris data
#(a) Read about the origin of the iris data
?iris
#(b) Create a boxplot of sepal lengths
boxplot(iris$Sepal.Length)
#(c) Add labels
boxplot(iris$Sepal.Length, ylab="Sepal Length", xlab="Not Sepal Length")
#(d) Make side-by-side boxplots
boxplot(iris$Sepal.Length ~ iris$Species)
#(e) Do the same thing but lazier
boxplot(Sepal.Length ~ Species, data=iris)
# Problem 3: Create a scatterplot of cherry tree data
#(a) Read about the dataset trees
?trees
#(b) Use the plot() function
# i. xy pairs
plot(trees$Volume, trees$Girth)
# ii. Use the formula argument
plot(Volume ~ Girth, data=trees)
# (c) Change the labels
plot(Volume ~ Girth, data=trees, xlab="Diameter in cm", ylab="Volume in cubic feet")
# Problem 4: Adding graphical elements
# (a) Using abline()
# i. Add a line representing the mean volume
abline(h=mean(trees$Volume))
# ii. Add a line representing the mean girth
abline(v=mean(trees$Girth))
# iii. Add a line with y intercept of -36.94 and slope of 5.066
abline(-36.94, 5.066)
#(b) Add the regression line to the plot
# i. Fit the regression model
model <- lm(Volume ~ Girth, data=trees)
# ii. Add the line
abline(model)
# Problem 5: Plot an arbitrary curve
#(a) Create a grid
x <- seq(0,10, length.out=11)
#(b) Create a vector of y-values
y <- dexp(x, rate=0.7)
#(c) Plot them xy style
plot(x,y)
#(d) Connect the dots
plot(x,y, type="b")
#(e) Smooth it out
x <- seq(0,10, length.out=1001)
y <-dexp(x, rate=0.7)
plot(x,y, type="l")
# Problem 6: Add another curve to the plot
#(a) Use the lines function
y<-dexp(x, rate=0.3)
lines(x,y)
#(b Change the color)
lines(x,y, col=2)
#### Mike Lommler ####
#### STA 599 ####
#### Lab Assignment 5 ####
##########################
# Problem 1: Create a histogram of data drawn from a normal distribution
#(a) n=1000, mean=5, standard deviation =3
Z <- rnorm(1000, 5, 3)
#(b) Create histogram using hist()
hist(Z)
#(c)
# i Use 100 bins
hist(Z, breaks=100)
# ii Creating bin width of 0.1
min(Z) #found minimum value of my normal distribution
max(Z) #maximum value of normal distribution
bins <- seq(-5, 20, by=.1)
hist(Z, breaks=bins)
#(d) Change the y-axis from frequency to density
hist(Z, breaks=bins, freq=FALSE)
#(e) Re-name the x-axis, in this case "My Name Is My Name"
hist(Z, breaks=bins, freq=FALSE, xlab="My Name Is My Name")
#(f) Give it a title, "Say What Again"
hist(Z, breaks=bins, freq=FALSE, xlab="My Name Is My Name", main="Say What Again")
# Problem 2: Create boxplots for iris data
#(a) Read about the origin of the iris data
?iris
#(b) Create a boxplot of sepal lengths
boxplot(iris$Sepal.Length)
#(c) Add labels
boxplot(iris$Sepal.Length, ylab="Sepal Length", xlab="Not Sepal Length")
#(d) Make side-by-side boxplots
boxplot(iris$Sepal.Length ~ iris$Species)
#(e) Do the same thing but lazier
boxplot(Sepal.Length ~ Species, data=iris)
# Problem 3: Create a scatterplot of cherry tree data
#(a) Read about the dataset trees
?trees
#(b) Use the plot() function
# i. xy pairs
plot(trees$Volume, trees$Girth)
# ii. Use the formula argument
plot(Volume ~ Girth, data=trees)
# (c) Change the labels
plot(Volume ~ Girth, data=trees, xlab="Diameter in cm", ylab="Volume in cubic feet")
# Problem 4: Adding graphical elements
# (a) Using abline()
# i. Add a line representing the mean volume
abline(h=mean(trees$Volume))
# ii. Add a line representing the mean girth
abline(v=mean(trees$Girth))
# iii. Add a line with y intercept of -36.94 and slope of 5.066
abline(-36.94, 5.066)
#(b) Add the regression line to the plot
# i. Fit the regression model
model <- lm(Volume ~ Girth, data=trees)
# ii. Add the line
abline(model)
# Problem 5: Plot an arbitrary curve
#(a) Create a grid
x <- seq(0,10, length.out=11)
#(b) Create a vector of y-values
y <- dexp(x, rate=0.7)
#(c) Plot them xy style
plot(x,y)
#(d) Connect the dots
plot(x,y, type="b")
#(e) Smooth it out
x <- seq(0,10, length.out=1001)
y <-dexp(x, rate=0.7)
plot(x,y, type="l")
# Problem 6: Add another curve to the plot
#(a) Use the lines function
y<-dexp(x, rate=0.3)
lines(x,y)
#(b Change the color)
lines(x,y, col=2)
#### Mike Lommler ####
#### STA 599 ####
#### Lab Assignment 5 ####
##########################
# Problem 1: Create a histogram of data drawn from a normal distribution
#(a) n=1000, mean=5, standard deviation =3
Z <- rnorm(1000, 5, 3)
#(b) Create histogram using hist()
hist(Z)
#(c)
# i Use 100 bins
hist(Z, breaks=100)
# ii Creating bin width of 0.1
min(Z) #found minimum value of my normal distribution
max(Z) #maximum value of normal distribution
bins <- seq(-10, 20, by=.1)
hist(Z, breaks=bins)
#(d) Change the y-axis from frequency to density
hist(Z, breaks=bins, freq=FALSE)
#(e) Re-name the x-axis, in this case "My Name Is My Name"
hist(Z, breaks=bins, freq=FALSE, xlab="My Name Is My Name")
#(f) Give it a title, "Say What Again"
hist(Z, breaks=bins, freq=FALSE, xlab="My Name Is My Name", main="Say What Again")
# Problem 2: Create boxplots for iris data
#(a) Read about the origin of the iris data
?iris
#(b) Create a boxplot of sepal lengths
boxplot(iris$Sepal.Length)
#(c) Add labels
boxplot(iris$Sepal.Length, ylab="Sepal Length", xlab="Not Sepal Length")
#(d) Make side-by-side boxplots
boxplot(iris$Sepal.Length ~ iris$Species)
#(e) Do the same thing but lazier
boxplot(Sepal.Length ~ Species, data=iris)
# Problem 3: Create a scatterplot of cherry tree data
#(a) Read about the dataset trees
?trees
#(b) Use the plot() function
# i. xy pairs
plot(trees$Volume, trees$Girth)
# ii. Use the formula argument
plot(Volume ~ Girth, data=trees)
# (c) Change the labels
plot(Volume ~ Girth, data=trees, xlab="Diameter in cm", ylab="Volume in cubic feet")
# Problem 4: Adding graphical elements
# (a) Using abline()
# i. Add a line representing the mean volume
abline(h=mean(trees$Volume))
# ii. Add a line representing the mean girth
abline(v=mean(trees$Girth))
# iii. Add a line with y intercept of -36.94 and slope of 5.066
abline(-36.94, 5.066)
#(b) Add the regression line to the plot
# i. Fit the regression model
model <- lm(Volume ~ Girth, data=trees)
# ii. Add the line
abline(model)
# Problem 5: Plot an arbitrary curve
#(a) Create a grid
x <- seq(0,10, length.out=11)
#(b) Create a vector of y-values
y <- dexp(x, rate=0.7)
#(c) Plot them xy style
plot(x,y)
#(d) Connect the dots
plot(x,y, type="b")
#(e) Smooth it out
x <- seq(0,10, length.out=1001)
y <-dexp(x, rate=0.7)
plot(x,y, type="l")
# Problem 6: Add another curve to the plot
#(a) Use the lines function
y<-dexp(x, rate=0.3)
lines(x,y)
#(b Change the color)
lines(x,y, col=2)
library(ggplot2)
install.packages("ggplot2")
qplot(iris$Sepal.Width)
qplot(iris$Sepal.Width)
library(ggplot2)
qplot(iris$Sepal.Width)
?iris
qplot(iris$Species)
qplot(Sepal.Width, Sepal.Length, data=iris)
qplot(Sepal.Width, Species, data=iris)
qplot(Species, Sepal.Width, data=iris)
qplot(Species, Sepal.Width, data=iris, geom='boxplot')
qplot(iris$Sepal.Width)
qplot(iris$Sepal.Width, binwidth=.1)
qplot(iris$Sepal.Width, binwidth=.5)
qplot(iris$Sepal.Width, binwidth=.05)
qplot(iris$Sepal.Width, binwidth=.1)
###### Mike Lommler ######
### STA 599 Lab 6 ###
#### Using ggplot2#######
##########################
#1 Attach the Package
library(ggplot2)
#2 See how qplot() responds to vectors and factors
#(a) A vector of continuous data
qplot(iris$Sepal.Width, binwidth=.1)
#(b) A vector of categorical data
qplot(iris$Species)
#(c) Two vectors
qplot(Sepal.Width, Sepal.Length, data=iris)
#(d) Two vectors, where one is continuous and one
# is categorical
qplot(Species, Sepal.Width, data=iris)
#(e) Produce a box-and-whisker plot
qplot(Species, Sepal.Width, data=iris, geom='boxplot')
qplot(Sepal.Width, Sepal.Length, data=iris)
qplot(Sepal.Width, Sepal.Length, data=iris, xlab="Sepal Width (cm)", ylab="Sepal Length (cm)")
qplot(Sepal.Width, Sepal.Length, data=iris,
xlab="Sepal Width (cm)", ylab="Sepal Length (cm)",
main="Relationship of Length and Width in Iris Sepals")
qplot(Sepal.Width, Sepal.Length, data=iris,
xlab="Sepal Width (cm)", ylab="Sepal Length (cm)",
main="Relationship of Length and Width in Iris Sepals",
color=Species)
qplot(Sepal.Width, Sepal.Length, data=iris,
xlab="Sepal Width (cm)", ylab="Sepal Length (cm)",
main="Relationship of Length and Width in Iris Sepals",
color=Petal.Length)
qplot(Sepal.Width, Sepal.Length, data=iris,
xlab="Sepal Width (cm)", ylab="Sepal Length (cm)",
main="Relationship of Length and Width in Iris Sepals",
color=Species, size=petal.length)
qplot(Sepal.Width, Sepal.Length, data=iris,
xlab="Sepal Width (cm)", ylab="Sepal Length (cm)",
main="Relationship of Length and Width in Iris Sepals",
color=Species, size=Petal.Length)
qplot(Sepal.Width, Sepal.Length, data=iris,
xlab="Sepal Width (cm)", ylab="Sepal Length (cm)",
main="Relationship of Length and Width in Iris Sepals",
color=Species, size=Petal.Length, facets=.~Species)
qplot(Sepal.Width, Sepal.Length, data=iris,
xlab="Sepal Width (cm)", ylab="Sepal Length (cm)",
main="Relationship of Length and Width in Iris Sepals",
color=Species, size=Petal.Length, facets=Species~.)
?mtcars
mtcars$gear<-factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am<-factor(mtcars$am, levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am, levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),xlab="Horsepower",
ylab="Miles per Gallon")
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am, levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
#(b) Make a matrix of scatterplots
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),xlab="Horsepower",
ylab="Miles per Gallon")
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(red),xlab="Horsepower",
ylab="Miles per Gallon")
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, color=I(3),xlab="Horsepower",
ylab="Miles per Gallon")
mtcars$gear <- factor(gear,levels=c(3,4,5),data=mtcars
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(am, levels=c(0,1),data=mtcars
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(cyl,levels=c(4,6,8),data=mtcars
labels=c("4cyl","6cyl","8cyl"))
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),xlab="Horsepower",
ylab="Miles per Gallon")
str(mtcars)
data(mtcars)
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am, levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
#(b) Make a matrix of scatterplots
str(mtcars)
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),xlab="Horsepower",
ylab="Miles per Gallon")
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),xlab="Horsepower",
ylab="Miles per Gallon", color="red")
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),xlab="Horsepower",
ylab="Miles per Gallon", color=red)
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),xlab="Horsepower",
ylab="Miles per Gallon", color=I(red))
qplot(gear, mpg, data=mtcars, geom=c("boxplot",
"point"), fill=gear, main="Mileage by Gear Number",
xlab="",ylab="Miles per Gallon")
qplot(wt, mpg, data=cars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl, main=
"Regression of MPG on Weight", xlab="Weight",
ylab="Miles per Gallon")
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl, main=
"Regression of MPG on Weight", xlab="Weight",
ylab="Miles per Gallon")
PCB <- c(2.9,7.6,4.8,5.2,5.1,4.7,6.9,4.9,3.7,3.8)
mean(PCB)
median(PCB)
sd(PCB)
fivenum(PCB)
hist(PCB)
hist(PCB, breaks=sqrt(length(PCB)), col="gray")
qqnorm(PCB, main="The Q-Q plot for PCB")
abline(mean(PCB), sd(PCB))
boxplot(PCB, range=0) #skeletal boxplot
boxplot(PCB, range=0) #skeletal boxplot
title("The boxplot for PCB")
boxplot(PCB) #modified boxplot
boxplot(PCB, col="gray", horizontal=TRUE) #horizontal
n <-length(PCB)
Xbar<-mean(PCB)
sigma <- 1.4
alpha <-.05
z <-qnorm(1-alpha/2)
n <-length(PCB)
Xbar<-mean(PCB)
sigma <- 1.4
alpha <-.05
z <-qnorm(1-alpha/2)
L <-Xbar + z*sigma/sqrt(n)
cat(paste("A 95% confidence interval for mu is
(",L,",",U,")"))
cat(paste("A 95% confidence interval for mu is (",L,",",U,")"))
n <-length(PCB)
Xbar<-mean(PCB)
sigma <- 1.4
alpha <-.05
z <-qnorm(1-alpha/2)
L <-Xbar + z*sigma/sqrt(n)
U <-Xbar + z*sigma/sqrt(n)
cat(paste("A 95% confidence interval for mu is (",L,",",U,")"))
n <-length(PCB)
Xbar<-mean(PCB)
sigma <- 1.4
alpha <-.05
z <-qnorm(1-alpha/2)
L <-Xbar + z*sigma/sqrt(n)
U <-Xbar + z*sigma/sqrt(n)
cat(paste("A 95% confidence interval for mu
is (",L,",",U,")"))
qnorm(1.96)
qnorm(.95)
qnorm(.975)
t,test(PCB,
alternative=c("two.sided","less","greater"),mu=4.9,
conf.level=.95)
t,test(PCB,alternative=c("two.sided","less","greater"),mu=4.9,conf.level=.95)
t.test(PCB,
alternative=c("two.sided","less","greater"),
mu=4.9,conf.level=.95)
pnorm(30,mean=25,sd=3.5)
pnorm(1.96)
qnorm(.99,mean=165,sd=20)
dnorm(170,mean=165,sd=20)
?dnorm
rnorm(10, mean=165, sd=20)
pt(2.5, df=37)
qt(.9, df=10)
?qt
dt(1.5, df=20)
rt(12,df=20)
x <- seq(-4, 4, by = 0.1)
y <- dnorm(x, mean = 0, sd = 1)
#par(mar = c(6, 5, 6, 3) + 0.1)
plot(x, y, ylim = c(0, 0.6), type = “l”)
lines(x, dt(x, df =3), lty = 2)
legend (-2.5, 0.6, c(“Standard normal”, “t distribution df = 3”), lty = 1:2, lwd = 0.5)
title(“Density curves of standard normal and t distributions”)
# Plot density curves of standard normal and t distributions
x <- seq(-4, 4, by = 0.1)
y <- dnorm(x, mean = 0, sd = 1)
#par(mar = c(6, 5, 6, 3) + 0.1)
plot(x, y, ylim = c(0, 0.6), type = "l")
lines(x, dt(x, df =3), lty = 2)
legend (-2.5, 0.6, c("Standard normal", "t distribution df = 3"), lty = 1:2, lwd = 0.5)
title("Density curves of standard normal and t distributions")
lat<-58
biome<-function(lat,long){if(lat>55) {print("Polar")}
else if(55>lat>23) {print("Temperate")} else if(23>lat)
{print("Equatorial")}}
lat<-58
biome<-function(lat,long){output<-if(lat>55) {print("Polar")}
else if(55>lat>23) {print("Temperate")} else if(23>lat)
{print("Equatorial")} return(output)}
setwd("E:/Course Work/Fall 2014/BIO 680")
read.csv(rock_lichen_data, header=TRUE)
read.csv(rock_lichen_data.csv, header=TRUE)
read.csv("rock_lichen_data", header=TRUE)
source('~/.active-rstudio-document')
setwd("E:/Course Work/Fall 2014/BIO 680")
read.csv("rock_lichen_data", header=TRUE)
getwd
read.csv(rock_lichen_data.csv, header=TRUE)
read.csv(E:/Course Work/Fall 2014/BIO 680/rock_lichen_data.csv, header=TRUE)
read.csv(rock_lichen_data, header=TRUE)
read.csv(rock_lichen_data, header=TRUE)
setwd("Y:/LOCKED/R_code/week01")
read.csv(rock_lichen_data, header=TRUE)
read.csv(rock_lichen_data.csv, header=TRUE)
read.csv("rock_lichen_data.csv", header=TRUE)
